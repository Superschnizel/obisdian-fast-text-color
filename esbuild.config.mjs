import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import sass from "node-sass";

const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// use scss

// Function to compile SCSS to CSS using node-sass
function compileSCSS() {
	sass.render({
		file: 'styles/styles.scss', // Input SCSS file
		outFile: 'styles.css', // Output CSS file
		// loadPaths: ["./styles"]
	}, (error, result) => {
		if (!error) {
			fs.writeFileSync('styles.css', result.css.toString());
		} else {
			console.error(error);
		}
	});
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
});

// Add SCSS compilation to the build process
compileSCSS();

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
	// Watch the SCSS file for changes separately
	fs.watch('styles', { recursive: true }, (eventType, filename) => {
		if (eventType === 'change' && filename.endsWith('.scss')) {
			compileSCSS(); // Re-compile SCSS on change
			console.log("Rebuilding styles.css")
			// build(); // Trigger the build process
		}
	});
}
